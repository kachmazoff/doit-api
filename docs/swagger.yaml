basePath: /api/
definitions:
  dto.IdResponse:
    properties:
      id:
        type: string
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.Registration:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.TokenResponse:
    properties:
      token:
        type: string
    type: object
  model.Challenge:
    properties:
      author_id:
        type: string
      body:
        type: string
      created:
        type: string
      id:
        type: string
      participants_type:
        type: string
      show_author:
        type: boolean
      title:
        type: string
      visible_type:
        type: string
    type: object
  model.Participant:
    properties:
      anonymous:
        type: boolean
      challenge_id:
        type: string
      created:
        type: string
      end_date:
        type: string
      id:
        type: string
      status:
        type: string
      team_id:
        type: string
      user_id:
        type: string
      visible_type:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Server for Doit App
  title: Doit API
  version: "1.0"
paths:
  /auth/activate:
    post:
      consumes:
      - application/json
      description: Активация нового аккаунта (подтверждение электронной почты)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Account activation
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Получение jwt-токена для дальнейшей работы с сервисом
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "404":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Login
      tags:
      - auth
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Создание нового пользователя
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.Registration'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.IdResponse'
      summary: Registration
      tags:
      - auth
  /challenges:
    get:
      consumes:
      - application/json
      description: Получение списка челленджей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Challenge'
            type: array
      summary: Get all challenges
      tags:
      - challenges
    post:
      consumes:
      - application/json
      description: Создание нового челленджа
      parameters:
      - description: Модель челленджа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Challenge'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.IdResponse'
      security:
      - Auth: []
      summary: Create challenge
      tags:
      - challenges
  /challenges/{challengeId}/participants:
    get:
      consumes:
      - application/json
      description: Получение списка участников в челлендже
      parameters:
      - description: Id челленджа
        in: path
        name: challengeId
        required: true
        type: string
      - description: Статус участников
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Participant'
            type: array
      summary: Get challenge's participants
      tags:
      - challenges
      - participants
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Get user info by username
      parameters:
      - description: username пользователя
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      summary: Get user info
      tags:
      - users
  /users/{username}/followees:
    get:
      consumes:
      - application/json
      description: Получение списка пользователей, на которых он подписан
      parameters:
      - description: username пользователя
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Get user's followees
      tags:
      - users
      - followers
  /users/{username}/followers:
    get:
      consumes:
      - application/json
      description: Получение списка пользователей, которые подписанны на данного пользователя
      parameters:
      - description: username пользователя
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Get user's followers
      tags:
      - users
      - followers
  /users/{username}/participants:
    get:
      consumes:
      - application/json
      description: Get participations of user by username
      parameters:
      - description: username пользователя
        in: path
        name: username
        required: true
        type: string
      - description: status для фильтраций
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Participant'
            type: array
      security:
      - Auth: []
      summary: Get user's participations
      tags:
      - users
      - participants
securityDefinitions:
  Auth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
